buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'scala'
apply plugin: 'forge'
apply plugin: 'curseforge'

// define the properties file
ext.configFile = file "project.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.mod_version}." + System.getenv("BUILD_NUMBER") ?: "1"
group= "${config.group_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${config.mod_id}"

minecraft {
    version = "${config.minecraft_version}-${config.forge_version}"
    runDir = "run"
}

repositories {
    maven {
        name = "ChickenBones"
        url = "http://chickenbones.net/maven"
    }
}

dependencies {
    compile 'codechicken:CodeChickenCore:1.7.10-1.0.4.29:dev'
    compile 'codechicken:NotEnoughItems:1.7.10-1.0.3.74:dev'
}

jar {
    manifest {
        attributes 'FMLAT': 'numina_at.cfg'
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}
artifacts {
    archives devJar
}

curse {
    projectId = '235440'
    apiKey = System.getenv(CURSE_API_KEY)
    releaseType = 'release'
}